# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mFlFUzuEFUZAWVSi4LKnxnoY_bhoM8Bc
"""

def perform_feature_engineering(data, seasonal_period=52, custom_dummy_dates=None,
                               split_variable=None, split_date=None,
                               super_campaign_vars=None, campaign_name="Super_Campaign"):
    """Perform feature engineering on the data with configurable parameters"""
    st.markdown('<h2 class="section-header">Feature Engineering</h2>', unsafe_allow_html=True)

    df = data.copy()

    # Add fiscal year
    if 'Week_Ending' in df.columns:
        df['Fiscal_Year'] = assign_fiscal_year(df['Week_Ending'])
        st.success("Added Fiscal Year column")

    # Seasonal decomposition
    st.markdown('<h3 class="sub-header">Seasonal Decomposition</h3>', unsafe_allow_html=True)
    if 'Week_Ending' in df.columns and 'Sales' in df.columns:
        try:
            from statsmodels.tsa.seasonal import seasonal_decompose

            temp_df = df.set_index('Week_Ending').sort_index()
            decomposition = seasonal_decompose(temp_df['Sales'], period=seasonal_period, model='additive', extrapolate_trend='freq')

            df['SIndex'] = decomposition.seasonal.values
            st.success(f"Seasonal Index (SIndex) created with period {seasonal_period}")

            # Show decomposition plot
            fig, axes = plt.subplots(4, 1, figsize=(12, 10), sharex=True)
            axes[0].plot(decomposition.observed)
            axes[0].set_ylabel("Observed")
            axes[0].set_title("Seasonal Decomposition")

            axes[1].plot(decomposition.trend)
            axes[1].set_ylabel("Trend")

            axes[2].plot(decomposition.seasonal)
            axes[2].set_ylabel("Seasonal")

            axes[3].plot(decomposition.resid)
            axes[3].set_ylabel("Residual")

            plt.tight_layout()
            st.pyplot(fig)
            plt.close(fig)
        except ImportError:
            st.warning("statsmodels is not installed. Please install it to use seasonal decomposition.")
        except Exception as e:
            st.error(f"Error in seasonal decomposition: {str(e)}")

    # Custom dummy variables
    st.markdown('<h3 class="sub-header">Custom Dummy Variables</h3>', unsafe_allow_html=True)
    if 'Week_Ending' in df.columns and custom_dummy_dates:
        try:
            for i, date_obj in enumerate(custom_dummy_dates, 1):
                dummy_name = f"dummy{i}_{date_obj.strftime('%Y-%m-%d')}"
                df[dummy_name] = (df['Week_Ending'] == date_obj).astype(int)
                st.success(f"Created dummy variable: {dummy_name}")
        except Exception as e:
            st.error(f"Error creating dummy variables: {str(e)}")

    # Split variables
    st.markdown('<h3 class="sub-header">Split Variables</h3>', unsafe_allow_html=True)
    if 'Week_Ending' in df.columns and split_variable and split_variable in df.columns and split_date:
        try:
            split_dt = pd.to_datetime(split_date)
            pre_mask = df['Week_Ending'] <= split_dt

            df[f"{split_variable}_pre"] = df[split_variable].where(pre_mask, 0)
            df[f"{split_variable}_post"] = df[split_variable].where(~pre_mask, 0)

            # Drop the original variable
            df.drop(columns=[split_variable], inplace=True)

            st.success(f"Split {split_variable} at {split_dt.date()}")
        except Exception as e:
            st.error(f"Error splitting variable: {str(e)}")

    # Super campaigns
    st.markdown('<h3 class="sub-header">Super Campaigns</h3>', unsafe_allow_html=True)
    if super_campaign_vars:
        try:
            # Filter to only include variables that exist in the dataframe
            valid_vars = [var for var in super_campaign_vars if var in df.columns]

            if valid_vars:
                # Create super campaign volume
                df[f"{campaign_name}_Volume"] = df[valid_vars].sum(axis=1)

                # Drop the original variables
                df.drop(columns=valid_vars, inplace=True)

                st.success(f"Created super campaign: {campaign_name} with variables {valid_vars}")
            else:
                st.warning("No valid variables selected for super campaign")
        except Exception as e:
            st.error(f"Error creating super campaign: {str(e)}")

    return df